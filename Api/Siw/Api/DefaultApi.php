<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Ingrid
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIW API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ingrid\Checkout\Api\Siw\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Ingrid\Checkout\Api\Siw\ApiException;
use Ingrid\Checkout\Api\Siw\Configuration;
use Ingrid\Checkout\Api\Siw\HeaderSelector;
use Ingrid\Checkout\Api\Siw\ObjectSerializer;
use Magento\Framework\HTTP\Client\CurlFactory;
use Magento\Framework\Serialize\Serializer\Json;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Ingrid
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi {
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var CurlFactory
     */
    private $curlFactory;

    /**
     * @var Json
     */
    private $json;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        CurlFactory $curlFactory,
        Json $json,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->curlFactory = $curlFactory;
        $this->json = $json;
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig() {
        return $this->config;
    }

    /**
     * Operation completeSession
     *
     * When the customer completes the purchase you also need to complete the session. At this point you will have to supply us with the address and the contact details of the user.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CompleteSessionRequest $body body (required)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ingrid\Checkout\Api\Siw\Model\CompleteSessionResponse
     */
    public function completeSession($body) {
        list($response) = $this->completeSessionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation completeSessionWithHttpInfo
     *
     * When the customer completes the purchase you also need to complete the session. At this point you will have to supply us with the address and the contact details of the user.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CompleteSessionRequest $body (required)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ingrid\Checkout\Api\Siw\Model\CompleteSessionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function completeSessionWithHttpInfo($body) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\CompleteSessionResponse';
        $request = $this->completeSessionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $curl = $this->curlFactory->create();
                $headers = $request->getHeaders();
                foreach($headers as $k => $v ){
                    $curl->addHeader($k, $v[0]);
                }

                $arrayBody = [
                    'checkout_session_id' => $body->getId()
                ];
                $body->getExternalId() ? $arrayBody['external_id'] = $body->getExternalId():'';
                if ($body->getCustomer()) {
                    if ($body->getCustomer()->getEmail()) {
                        $body->getCustomer()->getPhone() ? $arrayBody['customer']['phone'] = $body->getCustomer()->getPhone():'';
                        $body->getCustomer()->getEmail() ? $arrayBody['customer']['email'] = $body->getCustomer()->getEmail():'';
                        $body->getCustomer()->getNationalIdentificationNumber() ? $arrayBody['customer']['national_identification_number'] = $body->getCustomer()->getNationalIdentificationNumber():'';
                        if ($address = $body->getCustomer()->getAddress()) {
                            //address v2
                            $address->getName() ? $arrayBody['customer']["name"] = $address->getName():'';
                            $address->getCareOf() ? $arrayBody['customer']["care_of"] = $address->getCareOf():'';
                            $address->getAttn() ? $arrayBody['customer']["attn"] = $address->getAttn():'';
                            $address->getAddressLines() ? $arrayBody['customer']["address_lines"] = $address->getAddressLines():'';
                            $address->getCity() ? $arrayBody['customer']["city"] = $address->getCity():'';
                            $address->getRegion() ? $arrayBody['customer']["region"] = $address->getRegion():'';
                            $address->getPostalCode() ? $arrayBody['customer']["postal_code"] = $address->getPostalCode():'';
                            $address->getCountry() ? $arrayBody['customer']["country"] = $address->getCountry():'';
                            $address->getCoordinates() ? $arrayBody['customer']["coordinates"] = $address->getCoordinates():'';
                            $address->getDoorCode() ? $arrayBody['customer']["door_code"] = $address->getDoorCode():'';
                        };
                    }
                };
                $jsonBody = $this->json->serialize($arrayBody);
                $uri = $request->getUri();
                $url = $uri->getScheme()."://".$uri->getHost()."".$uri->getPath();
                $curl->post($url, $jsonBody);
                $response = $curl;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatus();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();

            if (gettype($responseBody) === "string") {
                $content = $responseBody;
                $content = json_decode($content);
                $returnType = "Ingrid\Checkout\Api\Siw\Model\CompleteSessionResponse";

            } else {
                if ($returnType === '\SplFileObject') {
                    $content = $responseBody; //stream goes to serializer
                } else {
                    $content = $responseBody->getContents();
                    if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatus(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ingrid\Checkout\Api\Siw\Model\CompleteSessionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation completeSessionAsync
     *
     * When the customer completes the purchase you also need to complete the session. At this point you will have to supply us with the address and the contact details of the user.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CompleteSessionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeSessionAsync($body) {
        return $this->completeSessionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation completeSessionAsyncWithHttpInfo
     *
     * When the customer completes the purchase you also need to complete the session. At this point you will have to supply us with the address and the contact details of the user.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CompleteSessionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function completeSessionAsyncWithHttpInfo($body) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\CompleteSessionResponse';
        $request = $this->completeSessionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'completeSession'
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CompleteSessionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function completeSessionRequest($body) {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling completeSession'
            );
        }

        $resourcePath = '/session.complete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createSession
     *
     * To add the Ingrid widget to the checkout page you will need to create a new session. This can be done by this call. When doing this you will need to provide some required information.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CreateSessionRequest $body body (required)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ingrid\Checkout\Api\Siw\Model\CreateSessionResponse
     */
    public function createSession($body) {
        list($response) = $this->createSessionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createSessionWithHttpInfo
     *
     * To add the Ingrid widget to the checkout page you will need to create a new session. This can be done by this call. When doing this you will need to provide some required information.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CreateSessionRequest $body (required)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ingrid\Checkout\Api\Siw\Model\CreateSessionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createSessionWithHttpInfo($body) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\CreateSessionResponse';
        $request = $this->createSessionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                //$response = $this->client->send($request, $options);
                $curl = $this->curlFactory->create();
                $headers = $request->getHeaders();
                foreach($headers as $k => $v ){
                    $curl->addHeader($k, $v[0]);
                }

                //create body and skipp values with null
                $body->getPurchaseCountry() ? $arrayBody['purchase_country'] = $body->getPurchaseCountry():'';
                $body->getPurchaseCurrency() ? $arrayBody["purchase_currency"] = $body->getPurchaseCurrency():'';
                $body->getLocales() ? $arrayBody["locales"] = $body->getLocales():'';
                //cart
                $body->getCart()->getAttributes() ? $arrayBody["cart"]["attributes"] = $body->getCart()->getAttributes():'';
                $body->getCart()->getTotalValue() ? $arrayBody["cart"]["total_value"] = $body->getCart()->getTotalValue():'';
                $body->getCart()->getTotalDiscount() ? $arrayBody["cart"]["total_discount"] = $body->getCart()->getTotalDiscount():'';
                $body->getCart()->getCurrency() ? $arrayBody["cart"]["currency"] = $body->getCart()->getCurrency():'';
                $body->getCart()->getPreOrder() ? $arrayBody["cart"]["pre_order"] = $body->getCart()->getPreOrder():'';
                $body->getCart()->getVoucher() ? $arrayBody["cart"]["voucher"] = $body->getCart()->getVoucher():'';
                $body->getCart()->getShippingDate() ? $arrayBody["cart"]["shipping_date"] = $body->getCart()->getShippingDate():'';
                $body->getCart()->getItems() ? $arrayBody["cart"]["items"] = $this->mapItems($body->getCart()->getItems()):'';
                $body->getCart()->getCartId() ? $arrayBody["cart"]["cart_id"] = $body->getCart()->getCartId():'';
                $body->getCart()->getVouchers() ? $arrayBody["cart"]["vouchers"] = $body->getCart()->getVouchers():'';

                if ($body->getSearchAddress()) {
                    $arrayBody['search_sddress'] = $this->mapAddress($body->getSearchAddress());
                }
                if ($body->getPrefillDeliveryAddress()) {
                    $arrayBody['prefill_delivery_address'] = $this->mapAddress($body->getPrefillDeliveryAddress());
                    $arrayBody['prefill_delivery_address']['email'] = $body->getCustomer()->getEmail();
                    $arrayBody['prefill_delivery_address']['phone'] = $body->getCustomer()->getPhone();
                }
                $jsonBody = $this->json->serialize($arrayBody);
                $uri = $request->getUri();
                $url = $uri->getScheme()."://".$uri->getHost()."".$uri->getPath();
                $curl->post($url, $jsonBody);
                $response = $curl;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatus();

            if ($statusCode < 100 || $statusCode > 299 ) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();

            if (gettype($responseBody) === "string") {
                $content = $responseBody;
                $content = json_decode($content);
                $returnType = "Ingrid\Checkout\Api\Siw\Model\CreateSessionResponse";

            } else {
                if ($returnType === '\SplFileObject') {
                    $content = $responseBody; //stream goes to serializer
                } else {
                    $content = $responseBody->getContents();
                    if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatus(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ingrid\Checkout\Api\Siw\Model\CreateSessionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createSessionAsync
     *
     * To add the Ingrid widget to the checkout page you will need to create a new session. This can be done by this call. When doing this you will need to provide some required information.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CreateSessionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionAsync($body) {
        return $this->createSessionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createSessionAsyncWithHttpInfo
     *
     * To add the Ingrid widget to the checkout page you will need to create a new session. This can be done by this call. When doing this you will need to provide some required information.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CreateSessionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createSessionAsyncWithHttpInfo($body) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\CreateSessionResponse';
        $request = $this->createSessionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createSession'
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\CreateSessionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createSessionRequest($body) {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createSession'
            );
        }

        $resourcePath = '/session.create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getSession
     *
     * Fetches a session by ID. Can be used for loading a previously created session that have been stored together with a customer's shopping cart from a previous visit.
     *
     * @param  string $id Session ID [required]. (optional)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ingrid\Checkout\Api\Siw\Model\GetSessionResponse
     */
    public function getSession($id = null) {
        list($response) = $this->getSessionWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getSessionWithHttpInfo
     *
     * Fetches a session by ID. Can be used for loading a previously created session that have been stored together with a customer's shopping cart from a previous visit.
     *
     * @param  string $id Session ID [required]. (optional)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ingrid\Checkout\Api\Siw\Model\GetSessionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getSessionWithHttpInfo($id = null) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\GetSessionResponse';
        $request = $this->getSessionRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ingrid\Checkout\Api\Siw\Model\GetSessionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getSessionAsync
     *
     * Fetches a session by ID. Can be used for loading a previously created session that have been stored together with a customer's shopping cart from a previous visit.
     *
     * @param  string $id Session ID [required]. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSessionAsync($id = null) {
        return $this->getSessionAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getSessionAsyncWithHttpInfo
     *
     * Fetches a session by ID. Can be used for loading a previously created session that have been stored together with a customer's shopping cart from a previous visit.
     *
     * @param  string $id Session ID [required]. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getSessionAsyncWithHttpInfo($id = null) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\GetSessionResponse';
        $request = $this->getSessionRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getSession'
     *
     * @param  string $id Session ID [required]. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getSessionRequest($id = null) {
        $resourcePath = '/session.get';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($id !== null) {
            $queryParams['checkout_session_id'] = ObjectSerializer::toQueryValue($id, null);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listSessionsSummaries
     *
     * Allows the user to get shipping data (session IDs and result fields) associated with tos ID.
     *
     * @param  string $tos_id tos_id (optional)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ingrid\Checkout\Api\Siw\Model\ListSessionsSummariesResponse
     */
    public function listSessionsSummaries($tos_id = null) {
        list($response) = $this->listSessionsSummariesWithHttpInfo($tos_id);
        return $response;
    }

    /**
     * Operation listSessionsSummariesWithHttpInfo
     *
     * Allows the user to get shipping data (session IDs and result fields) associated with tos ID.
     *
     * @param  string $tos_id (optional)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ingrid\Checkout\Api\Siw\Model\ListSessionsSummariesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listSessionsSummariesWithHttpInfo($tos_id = null) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\ListSessionsSummariesResponse';
        $request = $this->listSessionsSummariesRequest($tos_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ingrid\Checkout\Api\Siw\Model\ListSessionsSummariesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listSessionsSummariesAsync
     *
     * Allows the user to get shipping data (session IDs and result fields) associated with tos ID.
     *
     * @param  string $tos_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSessionsSummariesAsync($tos_id = null) {
        return $this->listSessionsSummariesAsyncWithHttpInfo($tos_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listSessionsSummariesAsyncWithHttpInfo
     *
     * Allows the user to get shipping data (session IDs and result fields) associated with tos ID.
     *
     * @param  string $tos_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listSessionsSummariesAsyncWithHttpInfo($tos_id = null) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\ListSessionsSummariesResponse';
        $request = $this->listSessionsSummariesRequest($tos_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listSessionsSummaries'
     *
     * @param  string $tos_id (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listSessionsSummariesRequest($tos_id = null) {
        $resourcePath = '/sessions_summaries.list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($tos_id !== null) {
            $queryParams['tos_id'] = ObjectSerializer::toQueryValue($tos_id, null);
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateSession
     *
     * Update the session with new information. Useful for cases where the customer or cart information is changed. The later being the most common case.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\UpdateSessionRequest $body body (required)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Ingrid\Checkout\Api\Siw\Model\UpdateSessionResponse
     */
    public function updateSession($body) {
        list($response) = $this->updateSessionWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateSessionWithHttpInfo
     *
     * Update the session with new information. Useful for cases where the customer or cart information is changed. The later being the most common case.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\UpdateSessionRequest $body (required)
     *
     * @throws \Ingrid\Checkout\Api\Siw\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Ingrid\Checkout\Api\Siw\Model\UpdateSessionResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateSessionWithHttpInfo($body) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\UpdateSessionResponse';
        $request = $this->updateSessionRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                //$response = $this->client->send($request, $options);
                $curl = $this->curlFactory->create();
                $headers = $request->getHeaders();
                foreach($headers as $k => $v ){
                    $curl->addHeader($k, $v[0]);
                };
                $arrayBody = [
                    'checkout_session_id' => $body->getId()
                ];
                $body->getExternalId() ? $arrayBody['external_id'] = $body->getExternalId():'';
                if ($body->getSearchAddress()) {
                    if ($body->getSearchAddress()->getPostalCode()) {
                        $arrayBody['search_sddress'] = [
                            $this->mapAddress($body->getSearchAddress())
                        ];
                    }
                }
                $body->getPurchaseCountry() ? $arrayBody['purchase_country'] = $body->getPurchaseCountry():'';
                $body->getPurchaseCurrency() ? $arrayBody["purchase_currency"] = $body->getPurchaseCurrency():'';
                $body->getLocales() ? $arrayBody["locales"] = $body->getLocales():'';
                if ($body->getCart()) {
                    $body->getCart()->getAttributes() ? $arrayBody["cart"]["attributes"] = $body->getCart()->getAttributes():'';
                    $body->getCart()->getTotalValue() ? $arrayBody["cart"]["total_value"] = $body->getCart()->getTotalValue():'';
                    $body->getCart()->getTotalDiscount() ? $arrayBody["cart"]["total_discount"] = $body->getCart()->getTotalDiscount():'';
                    $body->getCart()->getCurrency() ? $arrayBody["cart"]["currency"] = $body->getCart()->getCurrency():'';
                    $body->getCart()->getPreOrder() ? $arrayBody["cart"]["pre_order"] = $body->getCart()->getPreOrder():'';
                    $body->getCart()->getVoucher() ? $arrayBody["cart"]["voucher"] = $body->getCart()->getVoucher():'';
                    $body->getCart()->getShippingDate() ? $arrayBody["cart"]["shipping_date"] = $body->getCart()->getShippingDate():'';
                    $body->getCart()->getItems() ? $arrayBody["cart"]["items"] = $this->mapItems($body->getCart()->getItems()):'';
                    $body->getCart()->getCartId() ? $arrayBody["cart"]["cart_id"] = $body->getCart()->getCartId():'';
                    $body->getCart()->getVouchers() ? $arrayBody["cart"]["vouchers"] = $body->getCart()->getVouchers():'';
                }
                if ($body->getCustomer()) {
                    if ($body->getCustomer()->getEmail()) {
                        $body->getCustomer()->getPhone() ? $arrayBody['customer']['phone'] = $body->getCustomer()->getPhone():'';
                        $body->getCustomer()->getEmail() ? $arrayBody['customer']['email'] = $body->getCustomer()->getEmail():'';
                        $body->getCustomer()->getNationalIdentificationNumber() ? $arrayBody['customer']['national_identification_number'] = $body->getCustomer()->getNationalIdentificationNumber():'';
                        if ($body->getCustomer()->getAddress()) {
                            $arrayBody['customer']['address'] = $this->mapAddress($body->getCustomer()->getAddress());
                        };
                    }
                };
                
                
                $jsonBody = $this->json->serialize($arrayBody);
                $uri = $request->getUri();
                $url = $uri->getScheme()."://".$uri->getHost()."".$uri->getPath();
                $curl->post($url, $jsonBody);
                $response = $curl;
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatus();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }
            $responseBody = $response->getBody();
            if (gettype($responseBody) === "string") {
                $content = $responseBody;
                $content = json_decode($content);
                $returnType = "Ingrid\Checkout\Api\Siw\Model\UpdateSessionResponse";

            } else {
                $responseBody = $response->getBody();
                if ($returnType === '\SplFileObject') {
                    $content = $responseBody; //stream goes to serializer
                } else {
                    $content = $responseBody->getContents();
                    if (!in_array($returnType, ['string', 'integer', 'bool'])) {
                        $content = json_decode($content);
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatus(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Ingrid\Checkout\Api\Siw\Model\UpdateSessionResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateSessionAsync
     *
     * Update the session with new information. Useful for cases where the customer or cart information is changed. The later being the most common case.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\UpdateSessionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSessionAsync($body) {
        return $this->updateSessionAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateSessionAsyncWithHttpInfo
     *
     * Update the session with new information. Useful for cases where the customer or cart information is changed. The later being the most common case.
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\UpdateSessionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateSessionAsyncWithHttpInfo($body) {
        $returnType = '\Ingrid\Checkout\Api\Siw\Model\UpdateSessionResponse';
        $request = $this->updateSessionRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateSession'
     *
     * @param  \Ingrid\Checkout\Api\Siw\Model\UpdateSessionRequest $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateSessionRequest($body) {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateSession'
            );
        }

        $resourcePath = '/session.update';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption() {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * map address
     *
     * @return array 
     */
    protected function mapAddress($address) {        
        $address->getName() ? $mapAddress["name"] = $address->getName():'';
        $address->getFirstName() ? $mapAddress["first_name"] = $address->getFirstName():'';
        $address->getLastName() ? $mapAddress["last_name"] = $address->getLastName():'';
        $address->getCareOf() ? $mapAddress["care_of"] = $address->getCareOf():'';
        $address->getAttn() ? $mapAddress["attn"] = $address->getAttn():'';
        $address->getAddressLines() ? $mapAddress["address_lines"] = $address->getAddressLines():'';
        $address->getCity() ? $mapAddress["city"] = $address->getCity():'';
        $address->getRegion() ? $mapAddress["region"] = $address->getRegion():'';
        $address->getPostalCode() ? $mapAddress["postal_code"] = $address->getPostalCode():'';
        $address->getCountry() ? $mapAddress["country"] = $address->getCountry():'';
        $address->getCoordinates() ? $mapAddress["coordinates"] = $address->getCoordinates():'';
        $address->getDoorCode() ? $mapAddress["door_code"] = $address->getDoorCode():'';
        return $mapAddress;
    }

    /**
     * map Items
     *
     * @return array 
     */
    protected function mapItems($items) {
        $mapItems = [];
        foreach ($items as $key => $item) {
            $item->getSku() ? $mapItems[$key]["sku"] = $item->getSku():'';
            $item->getName() ? $mapItems[$key]["name"] = $item->getName():'';
            $item->getAttributes() ? $mapItems[$key]["attributes"] = $item->getAttributes():'';
            $item->getOutOfStock() === true ? $mapItems[$key]["out_of_stock"] = $item->getOutOfStock() : $mapItems[$key]["out_of_stock"] = false;
            $item->getDimensions() ? $mapItems[$key]["dimensions"] = $item->getDimensions()->getData():'';
            $item->getQuantity() ? $mapItems[$key]["quantity"] = $item->getQuantity():'';
            $item->getWeight() ? $mapItems[$key]["weight"] = $item->getWeight():'';
            $item->getDiscount() ? $mapItems[$key]["discount"] = $item->getDiscount():'';
            $item->getPrice() ? $mapItems[$key]["price"] = $item->getPrice():'';
        }
        return $mapItems;
    }  
}
