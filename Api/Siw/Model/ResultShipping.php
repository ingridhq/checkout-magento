<?php
/**
 * ResultShipping
 *
 * PHP version 5
 *
 * @category Class
 * @package  Ingrid
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SIW API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.21
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Ingrid\Checkout\Api\Siw\Model;

use ArrayAccess;
use Ingrid\Checkout\Api\Siw\ObjectSerializer;

/**
 * ResultShipping Class Doc Comment
 *
 * @category Class
 * @description How the package should be shipped to the end customer.
 * @package  Ingrid
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ResultShipping implements ModelInterface, ArrayAccess {
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ResultShipping';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipping_method' => 'string',
        'delivery_type' => 'string',
        'carrier' => 'string',
        'product' => 'string',
        'location' => '\Ingrid\Checkout\Api\Siw\Model\PickupLocation',
        'delivery_time' => '\Ingrid\Checkout\Api\Siw\Model\TimeSlot',
        'external_method_id' => 'string',
        'addons' => '\Ingrid\Checkout\Api\Siw\Model\CarrierAddon[]',
        'supports' => '\Ingrid\Checkout\Api\Siw\Model\Supports',
        'meta' => 'map[string,string]',
        'route' => '\Ingrid\Checkout\Api\Siw\Model\Route',
        'delivery_addons' => '\Ingrid\Checkout\Api\Siw\Model\ResultDeliveryAddon[]',    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipping_method' => null,
        'delivery_type' => null,
        'carrier' => null,
        'product' => null,
        'location' => null,
        'delivery_time' => null,
        'external_method_id' => null,
        'addons' => null,
        'supports' => null,
        'meta' => null,
        'route' => null,
        'delivery_addons' => null,    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes() {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats() {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_method' => 'shipping_method',
        'delivery_type' => 'delivery_type',
        'carrier' => 'carrier',
        'product' => 'product',
        'location' => 'location',
        'delivery_time' => 'delivery_time',
        'external_method_id' => 'external_method_id',
        'addons' => 'addons',
        'supports' => 'supports',
        'meta' => 'meta',
        'route' => 'route',
        'delivery_addons' => 'delivery_addons',    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_method' => 'setShippingMethod',
        'delivery_type' => 'setDeliveryType',
        'carrier' => 'setCarrier',
        'product' => 'setProduct',
        'location' => 'setLocation',
        'delivery_time' => 'setDeliveryTime',
        'external_method_id' => 'setExternalMethodId',
        'addons' => 'setAddons',
        'supports' => 'setSupports',
        'meta' => 'setMeta',
        'route' => 'setRoute',
        'delivery_addons' => 'setDeliveryAddons',    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_method' => 'getShippingMethod',
        'delivery_type' => 'getDeliveryType',
        'carrier' => 'getCarrier',
        'product' => 'getProduct',
        'location' => 'getLocation',
        'delivery_time' => 'getDeliveryTime',
        'external_method_id' => 'getExternalMethodId',
        'addons' => 'getAddons',
        'supports' => 'getSupports',
        'meta' => 'getMeta',
        'route' => 'getRoute',
        'delivery_addons' => 'getDeliveryAddons',    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() {
        return self::$swaggerModelName;
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null) {
        $this->container['shipping_method'] = isset($data['shipping_method']) ? $data['shipping_method'] : null;
        $this->container['delivery_type'] = isset($data['delivery_type']) ? $data['delivery_type'] : null;
        $this->container['carrier'] = isset($data['carrier']) ? $data['carrier'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['delivery_time'] = isset($data['delivery_time']) ? $data['delivery_time'] : null;
        $this->container['external_method_id'] = isset($data['external_method_id']) ? $data['external_method_id'] : null;
        $this->container['addons'] = isset($data['addons']) ? $data['addons'] : null;
        $this->container['supports'] = isset($data['supports']) ? $data['supports'] : null;
        $this->container['meta'] = isset($data['meta']) ? $data['meta'] : null;
        $this->container['route'] = isset($data['route']) ? $data['route'] : null;
        $this->container['delivery_addons'] = isset($data['delivery_addons']) ? $data['delivery_addons'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid() {
        return count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets shipping_method
     *
     * @return string
     */
    public function getShippingMethod() {
        return $this->container['shipping_method'];
    }

    /**
     * Sets shipping_method
     *
     * @param string $shipping_method Ingrid's ID of the shipping product. Example `bst-std` for BEST Delivery.
     *
     * @return $this
     */
    public function setShippingMethod($shipping_method) {
        $this->container['shipping_method'] = $shipping_method;

        return $this;
    }

    /**
     * Gets delivery_type
     *
     * @return string
     */
    public function getDeliveryType() {
        return $this->container['delivery_type'];
    }

    /**
     * Sets delivery_type
     *
     * @param string $delivery_type Type of delivery (pickup, instore, mailbox, delivery).
     *
     * @return $this
     */
    public function setDeliveryType($delivery_type) {
        $this->container['delivery_type'] = $delivery_type;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return string
     */
    public function getCarrier() {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param string $carrier Name of the shipping company.
     *
     * @return $this
     */
    public function setCarrier($carrier) {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct() {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product Name of the shipping product.
     *
     * @return $this
     */
    public function setProduct($product) {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Ingrid\Checkout\Api\Siw\Model\PickupLocation
     */
    public function getLocation() {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Ingrid\Checkout\Api\Siw\Model\PickupLocation $location location
     *
     * @return $this
     */
    public function setLocation($location) {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets delivery_time
     *
     * @return \Ingrid\Checkout\Api\Siw\Model\TimeSlot
     */
    public function getDeliveryTime() {
        return $this->container['delivery_time'];
    }

    /**
     * Sets delivery_time
     *
     * @param \Ingrid\Checkout\Api\Siw\Model\TimeSlot $delivery_time delivery_time
     *
     * @return $this
     */
    public function setDeliveryTime($delivery_time) {
        $this->container['delivery_time'] = $delivery_time;

        return $this;
    }

    /**
     * Gets external_method_id
     *
     * @return string
     */
    public function getExternalMethodId() {
        return $this->container['external_method_id'];
    }

    /**
     * Sets external_method_id
     *
     * @param string $external_method_id External method identifier, can be used for merchant-specific shipping methods mappings, eg override.
     *
     * @return $this
     */
    public function setExternalMethodId($external_method_id) {
        $this->container['external_method_id'] = $external_method_id;

        return $this;
    }

    /**
     * Gets addons
     *
     * @return \Ingrid\Checkout\Api\Siw\Model\CarrierAddon[]
     */
    public function getAddons() {
        return $this->container['addons'];
    }

    /**
     * Sets addons
     *
     * @param \Ingrid\Checkout\Api\Siw\Model\CarrierAddon[] $addons Shipping products addons that are enabled by default. Can be configured in the Merchant Admin tool.
     *
     * @return $this
     */
    public function setAddons($addons) {
        $this->container['addons'] = $addons;

        return $this;
    }

    /**
     * Gets supports
     *
     * @return \Ingrid\Checkout\Api\Siw\Model\Supports
     */
    public function getSupports() {
        return $this->container['supports'];
    }

    /**
     * Sets supports
     *
     * @param \Ingrid\Checkout\Api\Siw\Model\Supports $supports supports
     *
     * @return $this
     */
    public function setSupports($supports) {
        $this->container['supports'] = $supports;

        return $this;
    }

    /**
     * Gets meta
     *
     * @return map[string,string]
     */
    public function getMeta() {
        return $this->container['meta'];
    }

    /**
     * Sets meta
     *
     * @param map[string,string] $meta Carrier specific metadata related to the shipping option, for example addons.
     *
     * @return $this
     */
    public function setMeta($meta) {
        $this->container['meta'] = $meta;

        return $this;
    }

    /**
     * Gets route
     *
     * @return \Ingrid\Checkout\Api\Siw\Model\Route
     */
    public function getRoute() {
        return $this->container['route'];
    }

    /**
     * Sets route
     *
     * @param \Ingrid\Checkout\Api\Siw\Model\Route $route route
     *
     * @return $this
     */
    public function setRoute($route) {
        $this->container['route'] = $route;

        return $this;
    }

    /**
     * Gets delivery_addons
     *
     * @return \Ingrid\Checkout\Api\Siw\Model\ResultDeliveryAddon[]
     */
    public function getDeliveryAddons() {
        return $this->container['delivery_addons'];
    }

    /**
     * Sets delivery_addons
     *
     * @param \Ingrid\Checkout\Api\Siw\Model\ResultDeliveryAddon[] $delivery_addons Selected delivery addons.
     *
     * @return $this
     */
    public function setDeliveryAddons($delivery_addons) {
        $this->container['delivery_addons'] = $delivery_addons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
